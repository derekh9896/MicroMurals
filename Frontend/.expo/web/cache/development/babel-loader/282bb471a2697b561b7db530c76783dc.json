{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../../State\";\nimport { PointerType, TouchEventType, EventTypes } from \"../interfaces\";\nimport GestureHandlerOrchestrator from \"../tools/GestureHandlerOrchestrator\";\nimport InteractionManager from \"../tools/InteractionManager\";\nimport PointerEventManager from \"../tools/PointerEventManager\";\nimport PointerTracker from \"../tools/PointerTracker\";\nimport TouchEventManager from \"../tools/TouchEventManager\";\nimport { isPointerInBounds } from \"../utils\";\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n    _classCallCheck(this, GestureHandler);\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"currentState\", State.UNDETERMINED);\n    _defineProperty(this, \"shouldCancellWhenOutside\", false);\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n    _defineProperty(this, \"enabled\", false);\n    _defineProperty(this, \"ref\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"config\", {\n      enabled: false\n    });\n    _defineProperty(this, \"view\", void 0);\n    _defineProperty(this, \"eventManagers\", []);\n    _defineProperty(this, \"tracker\", new PointerTracker());\n    _defineProperty(this, \"activationIndex\", 0);\n    _defineProperty(this, \"awaiting\", false);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"shouldResetProgress\", false);\n    _defineProperty(this, \"pointerType\", PointerType.NONE);\n    _defineProperty(this, \"sendEvent\", function (newState, oldState) {\n      var _this$propsRef$curren = _this.propsRef.current,\n        onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n        onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n      var resultEvent = _this.transformEventData(newState, oldState);\n\n      if (_this.lastSentState !== newState) {\n        _this.lastSentState = newState;\n        invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n      }\n      if (_this.currentState === State.ACTIVE) {\n        resultEvent.nativeEvent.oldState = undefined;\n        invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n      }\n    });\n    this.hasCustomActivationCriteria = false;\n  }\n  _createClass(GestureHandler, [{\n    key: \"init\",\n    value:\n\n    function init(ref, propsRef) {\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.currentState = State.UNDETERMINED;\n      this.setView();\n      this.addEventManager(new PointerEventManager(this.view));\n      this.addEventManager(new TouchEventManager(this.view));\n    }\n  }, {\n    key: \"setView\",\n    value: function setView() {\n      if (!this.ref) {\n        throw new Error(\"Cannot find HTML Element for handler \" + this.handlerTag);\n      }\n      this.view = findNodeHandle(this.ref);\n      this.view.style['touchAction'] = 'none';\n      this.view.style['webkitUserSelect'] = 'none';\n      this.view.style['userSelect'] = 'none';\n\n      this.view.style['WebkitTouchCallout'] = 'none';\n    }\n  }, {\n    key: \"addEventManager\",\n    value: function addEventManager(manager) {\n      manager.setOnPointerDown(this.onPointerDown.bind(this));\n      manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n      manager.setOnPointerUp(this.onPointerUp.bind(this));\n      manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n      manager.setOnPointerMove(this.onPointerMove.bind(this));\n      manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n      manager.setOnPointerOut(this.onPointerOut.bind(this));\n      manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n      manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n      manager.setListeners();\n      this.eventManagers.push(manager);\n    }\n  }, {\n    key: \"onCancel\",\n    value:\n\n    function onCancel() {}\n  }, {\n    key: \"onReset\",\n    value: function onReset() {}\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {}\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.tracker.resetTracker();\n      this.onReset();\n      this.resetProgress();\n      this.eventManagers.forEach(function (manager) {\n        return manager.resetManager();\n      });\n      this.currentState = State.UNDETERMINED;\n    }\n  }, {\n    key: \"moveToState\",\n    value:\n\n    function moveToState(newState, sendIfDisabled) {\n      if (this.currentState === newState) {\n        return;\n      }\n      if (this.tracker.getTrackedPointersCount() > 0 && this.config.needsPointerData && (newState === State.END || newState === State.CANCELLED || newState === State.FAILED)) {\n        this.cancelTouches();\n      }\n      var oldState = this.currentState;\n      this.currentState = newState;\n      GestureHandlerOrchestrator.getInstance().onHandlerStateChange(this, newState, oldState, sendIfDisabled);\n      this.onStateChange(newState, oldState);\n    }\n  }, {\n    key: \"onStateChange\",\n    value: function onStateChange(_newState, _oldState) {}\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      if (!this.checkHitSlop()) {\n        return;\n      }\n      if (this.currentState === State.UNDETERMINED) {\n        this.moveToState(State.BEGAN);\n      }\n    }\n  }, {\n    key: \"fail\",\n    value:\n\n    function fail(sendIfDisabled) {\n      if (this.currentState === State.ACTIVE || this.currentState === State.BEGAN) {\n        this.moveToState(State.FAILED, sendIfDisabled);\n        this.view.style.cursor = 'auto';\n      }\n      this.resetProgress();\n    }\n  }, {\n    key: \"cancel\",\n    value:\n\n    function cancel(sendIfDisabled) {\n      if (this.currentState === State.ACTIVE || this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n        this.onCancel();\n        this.moveToState(State.CANCELLED, sendIfDisabled);\n        this.view.style.cursor = 'auto';\n      }\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      var _force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n        this.moveToState(State.ACTIVE);\n        this.view.style.cursor = 'grab';\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this.currentState === State.BEGAN || this.currentState === State.ACTIVE) {\n        this.moveToState(State.END);\n        this.view.style.cursor = 'auto';\n      }\n      this.resetProgress();\n    }\n  }, {\n    key: \"isAwaiting\",\n    value:\n\n    function isAwaiting() {\n      return this.awaiting;\n    }\n  }, {\n    key: \"setAwaiting\",\n    value: function setAwaiting(value) {\n      this.awaiting = value;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(value) {\n      this.active = value;\n    }\n  }, {\n    key: \"getShouldResetProgress\",\n    value: function getShouldResetProgress() {\n      return this.shouldResetProgress;\n    }\n  }, {\n    key: \"setShouldResetProgress\",\n    value: function setShouldResetProgress(value) {\n      this.shouldResetProgress = value;\n    }\n  }, {\n    key: \"getActivationIndex\",\n    value: function getActivationIndex() {\n      return this.activationIndex;\n    }\n  }, {\n    key: \"setActivationIndex\",\n    value: function setActivationIndex(value) {\n      this.activationIndex = value;\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldWaitForHandlerFailure(this, handler);\n    }\n  }, {\n    key: \"shouldRequireToWaitForFailure\",\n    value: function shouldRequireToWaitForFailure(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(this, handler);\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler) {\n      if (handler === this) {\n        return true;\n      }\n      return InteractionManager.getInstance().shouldRecognizeSimultaneously(this, handler);\n    }\n  }, {\n    key: \"shouldBeCancelledByOther\",\n    value: function shouldBeCancelledByOther(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldHandlerBeCancelledBy(this, handler);\n    }\n  }, {\n    key: \"onPointerDown\",\n    value:\n\n    function onPointerDown(event) {\n      GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n      this.pointerType = event.pointerType;\n      if (this.pointerType === PointerType.TOUCH) {\n        GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n      }\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value:\n\n    function onPointerAdd(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value:\n\n    function onPointerRemove(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.tryToSendMoveEvent(false);\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerOut\",\n    value: function onPointerOut(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      this.tryToSendMoveEvent(true);\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"tryToSendMoveEvent\",\n    value: function tryToSendMoveEvent(out) {\n      if (this.enabled && this.active && (!out || out && !this.shouldCancellWhenOutside)) {\n        this.sendEvent(this.currentState, this.currentState);\n      }\n    }\n  }, {\n    key: \"sendTouchEvent\",\n    value: function sendTouchEvent(event) {\n      if (!this.enabled) {\n        return;\n      }\n      var onGestureHandlerEvent = this.propsRef.current.onGestureHandlerEvent;\n      var touchEvent = this.transformTouchEvent(event);\n      if (touchEvent) {\n        invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n      }\n    }\n  }, {\n    key: \"transformEventData\",\n    value:\n\n    function transformEventData(newState, oldState) {\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: this.tracker.getTrackedPointersCount(),\n          state: newState,\n          pointerInside: isPointerInBounds(this.view, {\n            x: this.tracker.getLastAvgX(),\n            y: this.tracker.getLastAvgY()\n          })\n        }, this.transformNativeEvent()), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: newState !== oldState ? oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformTouchEvent\",\n    value: function transformTouchEvent(event) {\n      var _this2 = this;\n      var _event$touchEventType;\n      var rect = this.view.getBoundingClientRect();\n      var all = [];\n      var changed = [];\n      var trackerData = this.tracker.getData();\n\n      if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n        return;\n      }\n      trackerData.forEach(function (element, key) {\n        var id = _this2.tracker.getMappedTouchEventId(key);\n        all.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n\n      if (event.eventType !== EventTypes.CANCEL) {\n        changed.push({\n          id: this.tracker.getMappedTouchEventId(event.pointerId),\n          x: event.x - rect.left,\n          y: event.y - rect.top,\n          absoluteX: event.x,\n          absoluteY: event.y\n        });\n      } else {\n        trackerData.forEach(function (element, key) {\n          var id = _this2.tracker.getMappedTouchEventId(key);\n          changed.push({\n            id: id,\n            x: element.lastX - rect.left,\n            y: element.lastY - rect.top,\n            absoluteX: element.lastX,\n            absoluteY: element.lastY\n          });\n        });\n      }\n      var eventType = TouchEventType.UNDETERMINED;\n      switch (event.eventType) {\n        case EventTypes.DOWN:\n        case EventTypes.ADDITIONAL_POINTER_DOWN:\n          eventType = TouchEventType.DOWN;\n          break;\n        case EventTypes.UP:\n        case EventTypes.ADDITIONAL_POINTER_UP:\n          eventType = TouchEventType.UP;\n          break;\n        case EventTypes.MOVE:\n          eventType = TouchEventType.MOVE;\n          break;\n        case EventTypes.CANCEL:\n          eventType = TouchEventType.CANCELLED;\n          break;\n      }\n\n      var numberOfTouches = all.length;\n      if (event.eventType === EventTypes.UP || event.eventType === EventTypes.ADDITIONAL_POINTER_UP) {\n        --numberOfTouches;\n      }\n      return {\n        nativeEvent: {\n          handlerTag: this.handlerTag,\n          state: this.currentState,\n          eventType: (_event$touchEventType = event.touchEventType) !== null && _event$touchEventType !== void 0 ? _event$touchEventType : eventType,\n          changedTouches: changed,\n          allTouches: all,\n          numberOfTouches: numberOfTouches\n        },\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"cancelTouches\",\n    value: function cancelTouches() {\n      var _this3 = this;\n      var rect = this.view.getBoundingClientRect();\n      var all = [];\n      var changed = [];\n      var trackerData = this.tracker.getData();\n      if (trackerData.size === 0) {\n        return;\n      }\n      trackerData.forEach(function (element, key) {\n        var id = _this3.tracker.getMappedTouchEventId(key);\n        all.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n      var cancelEvent = {\n        nativeEvent: {\n          handlerTag: this.handlerTag,\n          state: this.currentState,\n          eventType: TouchEventType.CANCELLED,\n          changedTouches: changed,\n          allTouches: all,\n          numberOfTouches: all.length\n        },\n        timeStamp: Date.now()\n      };\n      var onGestureHandlerEvent = this.propsRef.current.onGestureHandlerEvent;\n      invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent() {\n      return {};\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value:\n\n    function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n        enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n        props = _objectWithoutProperties(_ref, _excluded);\n      this.config = _objectSpread({\n        enabled: enabled\n      }, props);\n      this.enabled = enabled;\n      this.validateHitSlops();\n      if (this.enabled) {\n        return;\n      }\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.fail(true);\n          break;\n        case State.UNDETERMINED:\n          GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(this);\n          break;\n        default:\n          this.cancel(true);\n          break;\n      }\n    }\n  }, {\n    key: \"checkCustomActivationCriteria\",\n    value: function checkCustomActivationCriteria(criterias) {\n      for (var key in this.config) {\n        if (criterias.indexOf(key) >= 0) {\n          this.hasCustomActivationCriteria = true;\n        }\n      }\n    }\n  }, {\n    key: \"validateHitSlops\",\n    value: function validateHitSlops() {\n      if (!this.config.hitSlop) {\n        return;\n      }\n      if (this.config.hitSlop.left !== undefined && this.config.hitSlop.right !== undefined && this.config.hitSlop.width !== undefined) {\n        throw new Error('HitSlop Error: Cannot define left, right and width at the same time');\n      }\n      if (this.config.hitSlop.width !== undefined && this.config.hitSlop.left === undefined && this.config.hitSlop.right === undefined) {\n        throw new Error('HitSlop Error: When width is defined, either left or right has to be defined');\n      }\n      if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top !== undefined && this.config.hitSlop.bottom !== undefined) {\n        throw new Error('HitSlop Error: Cannot define top, bottom and height at the same time');\n      }\n      if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top === undefined && this.config.hitSlop.bottom === undefined) {\n        throw new Error('HitSlop Error: When height is defined, either top or bottom has to be defined');\n      }\n    }\n  }, {\n    key: \"checkHitSlop\",\n    value: function checkHitSlop() {\n      if (!this.config.hitSlop) {\n        return true;\n      }\n      var width = this.view.getBoundingClientRect().width;\n      var height = this.view.getBoundingClientRect().height;\n      var left = 0;\n      var top = 0;\n      var right = width;\n      var bottom = height;\n      if (this.config.hitSlop.horizontal !== undefined) {\n        left -= this.config.hitSlop.horizontal;\n        right += this.config.hitSlop.horizontal;\n      }\n      if (this.config.hitSlop.vertical !== undefined) {\n        top -= this.config.hitSlop.vertical;\n        bottom += this.config.hitSlop.vertical;\n      }\n      if (this.config.hitSlop.left !== undefined) {\n        left = -this.config.hitSlop.left;\n      }\n      if (this.config.hitSlop.right !== undefined) {\n        right = width + this.config.hitSlop.right;\n      }\n      if (this.config.hitSlop.top !== undefined) {\n        top = -this.config.hitSlop.top;\n      }\n      if (this.config.hitSlop.bottom !== undefined) {\n        bottom = width + this.config.hitSlop.bottom;\n      }\n      if (this.config.hitSlop.width !== undefined) {\n        if (this.config.hitSlop.left !== undefined) {\n          right = left + this.config.hitSlop.width;\n        } else if (this.config.hitSlop.right !== undefined) {\n          left = right - this.config.hitSlop.width;\n        }\n      }\n      if (this.config.hitSlop.height !== undefined) {\n        if (this.config.hitSlop.top !== undefined) {\n          bottom = top + this.config.hitSlop.height;\n        } else if (this.config.hitSlop.bottom !== undefined) {\n          top = bottom - this.config.hitSlop.height;\n        }\n      }\n      var rect = this.view.getBoundingClientRect();\n      var offsetX = this.tracker.getLastX() - rect.left;\n      var offsetY = this.tracker.getLastY() - rect.top;\n      if (offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"isPointerInBounds\",\n    value: function isPointerInBounds(_ref2) {\n      var x = _ref2.x,\n        y = _ref2.y;\n      var rect = this.view.getBoundingClientRect();\n      return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {}\n  }, {\n    key: \"getTag\",\n    value:\n\n    function getTag() {\n      return this.handlerTag;\n    }\n  }, {\n    key: \"setTag\",\n    value: function setTag(tag) {\n      this.handlerTag = tag;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"getShouldEnableGestureOnSetup\",\n    value: function getShouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getView\",\n    value: function getView() {\n      return this.view;\n    }\n  }, {\n    key: \"getEventManagers\",\n    value: function getEventManagers() {\n      return this.eventManagers;\n    }\n  }, {\n    key: \"getTracker\",\n    value: function getTracker() {\n      return this.tracker;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      return this.tracker.getTrackedPointersID();\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.currentState;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"setShouldCancelWhenOutside\",\n    value: function setShouldCancelWhenOutside(shouldCancel) {\n      this.shouldCancellWhenOutside = shouldCancel;\n    }\n  }, {\n    key: \"getShouldCancelWhenOutside\",\n    value: function getShouldCancelWhenOutside() {\n      return this.shouldCancellWhenOutside;\n    }\n  }, {\n    key: \"getPointerType\",\n    value: function getPointerType() {\n      return this.pointerType;\n    }\n  }]);\n  return GestureHandler;\n}();\nexport { GestureHandler as default };\nfunction invokeNullableMethod(method, event) {\n  if (!method) {\n    return;\n  }\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    var handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n  var argMapping = method.__nodeConfig.argMapping;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n  for (var _iterator = _createForOfIteratorHelperLoose(argMapping.entries()), _step; !(_step = _iterator()).done;) {\n    var _ref3 = _step.value;\n    var _ref4 = _slicedToArray(_ref3, 2);\n    var index = _ref4[0];\n    var _ref4$ = _slicedToArray(_ref4[1], 2);\n    var key = _ref4$[0];\n    var value = _ref4$[1];\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    var nativeValue = event.nativeEvent[key];\n\n    if (value !== null && value !== void 0 && value.setValue) {\n      value.setValue(nativeValue);\n    } else {\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n  return;\n}","map":{"version":3,"mappings":"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","names":["State","PointerType","TouchEventType","EventTypes","GestureHandlerOrchestrator","InteractionManager","PointerEventManager","PointerTracker","TouchEventManager","isPointerInBounds","GestureHandler","constructor","_defineProperty","UNDETERMINED","enabled","NONE","newState","oldState","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","resultEvent","transformEventData","lastSentState","invokeNullableMethod","currentState","ACTIVE","nativeEvent","undefined","hasCustomActivationCriteria","init","ref","setView","addEventManager","view","Error","handlerTag","findNodeHandle","style","manager","setOnPointerDown","onPointerDown","bind","setOnPointerAdd","onPointerAdd","setOnPointerUp","onPointerUp","setOnPointerRemove","onPointerRemove","setOnPointerMove","onPointerMove","setOnPointerEnter","onPointerEnter","setOnPointerOut","onPointerOut","setOnPointerCancel","onPointerCancel","setOnPointerOutOfBounds","onPointerOutOfBounds","setListeners","eventManagers","push","onCancel","onReset","resetProgress","reset","tracker","resetTracker","forEach","resetManager","moveToState","sendIfDisabled","getTrackedPointersCount","config","needsPointerData","END","CANCELLED","FAILED","cancelTouches","getInstance","onHandlerStateChange","onStateChange","_newState","_oldState","begin","checkHitSlop","BEGAN","fail","cursor","cancel","activate","_force","end","isAwaiting","awaiting","setAwaiting","value","isActive","active","setActive","getShouldResetProgress","shouldResetProgress","setShouldResetProgress","getActivationIndex","activationIndex","setActivationIndex","shouldWaitForHandlerFailure","handler","shouldRequireToWaitForFailure","shouldRequireHandlerToWaitForFailure","shouldRecognizeSimultaneously","shouldBeCancelledByOther","shouldHandlerBeCancelledBy","event","recordHandlerIfNotPresent","pointerType","TOUCH","cancelMouseAndPenGestures","sendTouchEvent","tryToSendMoveEvent","out","shouldCancellWhenOutside","sendEvent","touchEvent","transformTouchEvent","numberOfPointers","state","pointerInside","x","getLastAvgX","y","getLastAvgY","transformNativeEvent","target","timeStamp","Date","now","rect","getBoundingClientRect","all","changed","trackerData","getData","size","has","pointerId","element","key","id","getMappedTouchEventId","lastX","left","lastY","top","absoluteX","absoluteY","eventType","CANCEL","DOWN","ADDITIONAL_POINTER_DOWN","UP","ADDITIONAL_POINTER_UP","MOVE","numberOfTouches","length","touchEventType","changedTouches","allTouches","cancelEvent","updateGestureConfig","props","validateHitSlops","removeHandlerFromOrchestrator","checkCustomActivationCriteria","criterias","indexOf","hitSlop","right","width","height","bottom","horizontal","vertical","offsetX","getLastX","offsetY","getLastY","resetConfig","getTag","setTag","tag","getConfig","getShouldEnableGestureOnSetup","getView","getEventManagers","getTracker","getTrackedPointersID","getState","isEnabled","setShouldCancelWhenOutside","shouldCancel","getShouldCancelWhenOutside","getPointerType","method","__getHandler","argMapping","__nodeConfig","Array","isArray","entries","index","nativeValue","setValue"],"sources":["GestureHandler.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../../State';\nimport {\n  Config,\n  AdaptedEvent,\n  PropsRef,\n  ResultEvent,\n  PointerData,\n  ResultTouchEvent,\n  PointerType,\n  TouchEventType,\n  EventTypes,\n} from '../interfaces';\nimport EventManager from '../tools/EventManager';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerEventManager from '../tools/PointerEventManager';\nimport PointerTracker, { TrackerElement } from '../tools/PointerTracker';\nimport TouchEventManager from '../tools/TouchEventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default abstract class GestureHandler {\n  private lastSentState: State | null = null;\n  protected currentState: State = State.UNDETERMINED;\n\n  protected shouldCancellWhenOutside = false;\n  protected hasCustomActivationCriteria: boolean;\n  protected enabled = false;\n\n  private ref!: number;\n  private propsRef!: React.RefObject<unknown>;\n  private handlerTag!: number;\n  protected config: Config = { enabled: false };\n  protected view!: HTMLElement;\n\n  protected eventManagers: EventManager[] = [];\n  protected tracker: PointerTracker = new PointerTracker();\n\n  // Orchestrator properties\n  protected activationIndex = 0;\n  protected awaiting = false;\n  protected active = false;\n  protected shouldResetProgress = false;\n  protected pointerType: PointerType = PointerType.NONE;\n\n  public constructor() {\n    this.hasCustomActivationCriteria = false;\n  }\n\n  //\n  // Initializing handler\n  //\n\n  protected init(ref: number, propsRef: React.RefObject<unknown>) {\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.currentState = State.UNDETERMINED;\n\n    this.setView();\n    this.addEventManager(new PointerEventManager(this.view));\n    this.addEventManager(new TouchEventManager(this.view));\n  }\n\n  private setView() {\n    if (!this.ref) {\n      throw new Error(\n        `Cannot find HTML Element for handler ${this.handlerTag}`\n      );\n    }\n\n    this.view = (findNodeHandle(this.ref) as unknown) as HTMLElement;\n    this.view.style['touchAction'] = 'none';\n    this.view.style['webkitUserSelect'] = 'none';\n    this.view.style['userSelect'] = 'none';\n\n    //@ts-ignore This one disables default events on Safari\n    this.view.style['WebkitTouchCallout'] = 'none';\n  }\n\n  private addEventManager(manager: EventManager): void {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerOut(this.onPointerOut.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setListeners();\n\n    this.eventManagers.push(manager);\n  }\n\n  //\n  // Resetting handler\n  //\n\n  protected onCancel(): void {}\n  protected onReset(): void {}\n  protected resetProgress(): void {}\n\n  public reset(): void {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.eventManagers.forEach((manager: EventManager) =>\n      manager.resetManager()\n    );\n    this.currentState = State.UNDETERMINED;\n  }\n\n  //\n  // State logic\n  //\n\n  public moveToState(newState: State, sendIfDisabled?: boolean) {\n    if (this.currentState === newState) {\n      return;\n    }\n\n    if (\n      this.tracker.getTrackedPointersCount() > 0 &&\n      this.config.needsPointerData &&\n      (newState === State.END ||\n        newState === State.CANCELLED ||\n        newState === State.FAILED)\n    ) {\n      this.cancelTouches();\n    }\n\n    const oldState = this.currentState;\n    this.currentState = newState;\n\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(\n      this,\n      newState,\n      oldState,\n      sendIfDisabled\n    );\n\n    this.onStateChange(newState, oldState);\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {}\n\n  public begin(): void {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */\n  public fail(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.FAILED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */\n  public cancel(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.onCancel();\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n  }\n\n  public activate(_force = false) {\n    if (\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.ACTIVE);\n      this.view.style.cursor = 'grab';\n    }\n  }\n\n  public end() {\n    if (\n      this.currentState === State.BEGAN ||\n      this.currentState === State.ACTIVE\n    ) {\n      this.moveToState(State.END);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  //\n  // Methods for orchestrator\n  //\n\n  public isAwaiting(): boolean {\n    return this.awaiting;\n  }\n  public setAwaiting(value: boolean): void {\n    this.awaiting = value;\n  }\n\n  public isActive(): boolean {\n    return this.active;\n  }\n  public setActive(value: boolean): void {\n    this.active = value;\n  }\n\n  public getShouldResetProgress(): boolean {\n    return this.shouldResetProgress;\n  }\n  public setShouldResetProgress(value: boolean): void {\n    this.shouldResetProgress = value;\n  }\n\n  public getActivationIndex(): number {\n    return this.activationIndex;\n  }\n  public setActivationIndex(value: number): void {\n    this.activationIndex = value;\n  }\n\n  public shouldWaitForHandlerFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRequireToWaitForFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return true;\n    }\n\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(\n      this,\n      handler\n    );\n  }\n\n  public shouldBeCancelledByOther(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(\n      this,\n      handler\n    );\n  }\n\n  //\n  // Event actions\n  //\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Adding another pointer to existing ones\n  protected onPointerAdd(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerUp(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Removing pointer, when there is more than one pointers\n  protected onPointerRemove(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(false);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerOut(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerEnter(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerCancel(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(true);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  private tryToSendMoveEvent(out: boolean): void {\n    if (\n      this.enabled &&\n      this.active &&\n      (!out || (out && !this.shouldCancellWhenOutside))\n    ) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n  }\n\n  public sendTouchEvent(event: AdaptedEvent): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    const touchEvent: ResultTouchEvent | undefined = this.transformTouchEvent(\n      event\n    );\n\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n\n  //\n  // Events Sending\n  //\n\n  public sendEvent = (newState: State, oldState: State): void => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    }: PropsRef = this.propsRef.current as PropsRef;\n\n    const resultEvent: ResultEvent = this.transformEventData(\n      newState,\n      oldState\n    );\n\n    // In the new API oldState field has to be undefined, unless we send event state changed\n    // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n    // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n    // However, this may cause trouble in the future (but for now we don't know that)\n\n    if (this.lastSentState !== newState) {\n      this.lastSentState = newState;\n      invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n    }\n    if (this.currentState === State.ACTIVE) {\n      resultEvent.nativeEvent.oldState = undefined;\n      invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n    }\n  };\n\n  private transformEventData(newState: State, oldState: State): ResultEvent {\n    return {\n      nativeEvent: {\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: isPointerInBounds(this.view, {\n          x: this.tracker.getLastAvgX(),\n          y: this.tracker.getLastAvgY(),\n        }),\n        ...this.transformNativeEvent(),\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: newState !== oldState ? oldState : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private transformTouchEvent(\n    event: AdaptedEvent\n  ): ResultTouchEvent | undefined {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    // This if handles edge case where all pointers have been cancelled\n    // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n    // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n    // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n    // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.left,\n        y: event.y - rect.top,\n        absoluteX: event.x,\n        absoluteY: event.y,\n      });\n    } else {\n      trackerData.forEach((element: TrackerElement, key: number): void => {\n        const id: number = this.tracker.getMappedTouchEventId(key);\n\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY,\n        });\n      });\n    }\n\n    let eventType: TouchEventType = TouchEventType.UNDETERMINED;\n\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n\n    // Here, when we receive up event, we want to decrease number of touches\n    // That's because we want handler to send information that there's one pointer less\n    // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n    let numberOfTouches: number = all.length;\n\n    if (\n      event.eventType === EventTypes.UP ||\n      event.eventType === EventTypes.ADDITIONAL_POINTER_UP\n    ) {\n      --numberOfTouches;\n    }\n\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: event.touchEventType ?? eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private cancelTouches(): void {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    if (trackerData.size === 0) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n\n      changed.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    const cancelEvent: ResultTouchEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length,\n      },\n      timeStamp: Date.now(),\n    };\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n\n  protected transformNativeEvent() {\n    return {};\n  }\n\n  //\n  // Handling config\n  //\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    this.config = { enabled: enabled, ...props };\n    this.enabled = enabled;\n    this.validateHitSlops();\n\n    if (this.enabled) {\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(\n          this\n        );\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n\n  protected checkCustomActivationCriteria(criterias: string[]): void {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n\n  private validateHitSlops(): void {\n    if (!this.config.hitSlop) {\n      return;\n    }\n\n    if (\n      this.config.hitSlop.left !== undefined &&\n      this.config.hitSlop.right !== undefined &&\n      this.config.hitSlop.width !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define left, right and width at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.width !== undefined &&\n      this.config.hitSlop.left === undefined &&\n      this.config.hitSlop.right === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When width is defined, either left or right has to be defined'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top !== undefined &&\n      this.config.hitSlop.bottom !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define top, bottom and height at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top === undefined &&\n      this.config.hitSlop.bottom === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When height is defined, either top or bottom has to be defined'\n      );\n    }\n  }\n\n  private checkHitSlop(): boolean {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n\n    const width = this.view.getBoundingClientRect().width;\n    const height = this.view.getBoundingClientRect().height;\n\n    let left = 0;\n    let top = 0;\n    let right: number = width;\n    let bottom: number = height;\n\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n\n    const rect: DOMRect = this.view.getBoundingClientRect();\n    const offsetX: number = this.tracker.getLastX() - rect.left;\n    const offsetY: number = this.tracker.getLastY() - rect.top;\n\n    if (\n      offsetX >= left &&\n      offsetX <= right &&\n      offsetY >= top &&\n      offsetY <= bottom\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  public isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return (\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom\n    );\n  }\n\n  protected resetConfig(): void {}\n\n  //\n  // Getters and setters\n  //\n\n  public getTag(): number {\n    return this.handlerTag;\n  }\n  public setTag(tag: number): void {\n    this.handlerTag = tag;\n  }\n\n  protected getConfig() {\n    return this.config;\n  }\n\n  public getShouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  public getView(): HTMLElement {\n    return this.view;\n  }\n\n  public getEventManagers(): EventManager[] {\n    return this.eventManagers;\n  }\n\n  public getTracker(): PointerTracker {\n    return this.tracker;\n  }\n\n  public getTrackedPointersID(): number[] {\n    return this.tracker.getTrackedPointersID();\n  }\n\n  public getState(): State {\n    return this.currentState;\n  }\n\n  public isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  protected setShouldCancelWhenOutside(shouldCancel: boolean) {\n    this.shouldCancellWhenOutside = shouldCancel;\n  }\n  protected getShouldCancelWhenOutside(): boolean {\n    return this.shouldCancellWhenOutside;\n  }\n\n  public getPointerType(): PointerType {\n    return this.pointerType;\n  }\n}\n\nfunction invokeNullableMethod(\n  method:\n    | ((event: ResultEvent | ResultTouchEvent) => void)\n    | { __getHandler: () => (event: ResultEvent | ResultTouchEvent) => void }\n    | { __nodeConfig: { argMapping: unknown[] } },\n  event: ResultEvent | ResultTouchEvent\n): void {\n  if (!method) {\n    return;\n  }\n\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n\n  const { argMapping } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const nativeValue = event.nativeEvent[key];\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (value?.setValue) {\n      //Reanimated API\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      value.setValue(nativeValue);\n    } else {\n      //RN Animated API\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n\n  return;\n}\n"]},"metadata":{},"sourceType":"module"}